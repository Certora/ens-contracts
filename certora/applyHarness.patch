--- ../contracts/wrapper/NameWrapper.sol	2022-12-18 18:29:31.919567200 +0200
+++ 	2022-12-26 17:10:24.082098300 +0200
@@ -1,17 +1,17 @@
 //SPDX-License-Identifier: MIT
 pragma solidity ~0.8.17;
 
-import {ERC1155Fuse, IERC165} from "./ERC1155Fuse.sol";
-import {Controllable} from "./Controllable.sol";
-import {INameWrapper, CANNOT_UNWRAP, CANNOT_BURN_FUSES, CANNOT_TRANSFER, CANNOT_SET_RESOLVER, CANNOT_SET_TTL, CANNOT_CREATE_SUBDOMAIN, PARENT_CANNOT_CONTROL, CAN_DO_EVERYTHING, IS_DOT_ETH, PARENT_CONTROLLED_FUSES, USER_SETTABLE_FUSES} from "./INameWrapper.sol";
-import {INameWrapperUpgrade} from "./INameWrapperUpgrade.sol";
-import {IMetadataService} from "./IMetadataService.sol";
-import {ENS} from "../registry/ENS.sol";
-import {IBaseRegistrar} from "../ethregistrar/IBaseRegistrar.sol";
+import {ERC1155Fuse, IERC165} from "../../contracts/wrapper/ERC1155Fuse.sol";
+import {Controllable} from "../../contracts/wrapper/Controllable.sol";
+import {INameWrapper, CANNOT_UNWRAP, CANNOT_BURN_FUSES, CANNOT_TRANSFER, CANNOT_SET_RESOLVER, CANNOT_SET_TTL, CANNOT_CREATE_SUBDOMAIN, PARENT_CANNOT_CONTROL, CAN_DO_EVERYTHING, IS_DOT_ETH, PARENT_CONTROLLED_FUSES, USER_SETTABLE_FUSES} from "../../contracts/wrapper/INameWrapper.sol";
+import {INameWrapperUpgrade} from "../../contracts/wrapper/INameWrapperUpgrade.sol";
+import {IMetadataService} from "../../contracts/wrapper/IMetadataService.sol";
+import {ENS} from "../../contracts/registry/ENS.sol";
+import {IBaseRegistrar} from "../../contracts/ethregistrar/IBaseRegistrar.sol";
 import {IERC721Receiver} from "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol";
 import {Ownable} from "@openzeppelin/contracts/access/Ownable.sol";
-import {BytesUtils} from "./BytesUtils.sol";
-import {ERC20Recoverable} from "../utils/ERC20Recoverable.sol";
+import {BytesUtils} from "../../contracts/wrapper/BytesUtils.sol";
+import {ERC20Recoverable} from "../../contracts/utils/ERC20Recoverable.sol";
 
 error Unauthorised(bytes32 node, address addr);
 error IncompatibleParent();
@@ -33,11 +33,11 @@
 {
     using BytesUtils for bytes;
 
-    ENS public immutable override ens;
-    IBaseRegistrar public immutable override registrar;
+    ENS public override ens; // Certora: removed 'immutable'
+    IBaseRegistrar public override registrar; // Certora: removed 'immutable'
     IMetadataService public override metadataService;
     mapping(bytes32 => bytes) public override names;
-    string public constant name = "NameWrapper";
+    //string public constant name = "NameWrapper"; // Certora: removed variable
 
     uint64 private constant GRACE_PERIOD = 90 days;
     bytes32 private constant ETH_NODE =
@@ -46,7 +46,6 @@
         0x4f5b812789fc606be1b3b16908db13fc7a9adf7ca72641f84d75b47069d3d7f0;
     bytes32 private constant ROOT_NODE =
         0x0000000000000000000000000000000000000000000000000000000000000000;
-
     INameWrapperUpgrade public upgradeContract;
     uint64 private constant MAX_EXPIRY = type(uint64).max;
 
@@ -412,7 +411,7 @@
     ) public {
         bytes32 labelhash = keccak256(bytes(label));
         bytes32 node = _makeNode(ETH_NODE, labelhash);
-        (uint32 fuses, uint64 expiry) = _prepareUpgrade(node);
+        (uint32 fuses, uint64 expiry) = (0,0);//_prepareUpgrade(node);
 
         upgradeContract.wrapETH2LD(
             label,
@@ -441,7 +440,8 @@
     ) public {
         bytes32 labelhash = keccak256(bytes(label));
         bytes32 node = _makeNode(parentNode, labelhash);
-        (uint32 fuses, uint64 expiry) = _prepareUpgrade(node);
+        (uint32 fuses, uint64 expiry) = (0,0);//_prepareUpgrade(node);
+
         upgradeContract.setSubnodeRecord(
             parentNode,
             label,
@@ -516,7 +516,7 @@
         uint32 fuses,
         uint64 expiry
     )
-        public
+        public virtual
         onlyTokenOwner(parentNode)
         canCallSetSubnodeOwner(parentNode, keccak256(bytes(label)))
         returns (bytes32 node)
@@ -556,7 +556,7 @@
         uint32 fuses,
         uint64 expiry
     )
-        public
+        public virtual
         onlyTokenOwner(parentNode)
         canCallSetSubnodeOwner(parentNode, keccak256(bytes(label)))
         returns (bytes32 node)
@@ -764,10 +764,11 @@
                 revert OperationProhibited(bytes32(id));
             }
         }
+        return true;    // Certora: Added return statement
     }
 
     function _makeNode(bytes32 node, bytes32 labelhash)
-        private
+        internal
         pure
         returns (bytes32)
     {
--- ../contracts/wrapper/mocks/UpgradedNameWrapperMock.sol	2022-12-19 10:33:11.665301400 +0200
+++ ./munged/UpgradedNameWrapperMock.sol	2022-12-26 15:28:11.276555500 +0200
@@ -1,13 +1,13 @@
 //SPDX-License-Identifier: MIT
 pragma solidity ^0.8.4;
-import "../INameWrapper.sol";
-import "../../registry/ENS.sol";
-import "../../ethregistrar/IBaseRegistrar.sol";
+import "../../contracts/wrapper/INameWrapperUpgrade.sol";
+import "../../contracts/registry/ENS.sol";
+import "../../contracts/ethregistrar/IBaseRegistrar.sol";
 
-contract UpgradedNameWrapperMock {
-    address public immutable oldNameWrapper;
-    ENS public immutable ens;
-    IBaseRegistrar public immutable registrar;
+contract UpgradedNameWrapperMock is INameWrapperUpgrade {
+    address public oldNameWrapper;
+    ENS public ens;
+    IBaseRegistrar public registrar;
 
     constructor(
         address _oldNameWrapper,

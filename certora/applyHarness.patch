--- ../contracts/wrapper/NameWrapper.sol	2023-01-16 09:39:00.249678600 +0200
+++ 	2023-01-19 16:28:35.634717200 +0200
@@ -1,17 +1,18 @@
 //SPDX-License-Identifier: MIT
 pragma solidity ~0.8.17;
 
-import {ERC1155Fuse, IERC165} from "./ERC1155Fuse.sol";
-import {Controllable} from "./Controllable.sol";
-import {INameWrapper, CANNOT_UNWRAP, CANNOT_BURN_FUSES, CANNOT_TRANSFER, CANNOT_SET_RESOLVER, CANNOT_SET_TTL, CANNOT_CREATE_SUBDOMAIN, PARENT_CANNOT_CONTROL, CAN_DO_EVERYTHING, IS_DOT_ETH, PARENT_CONTROLLED_FUSES, USER_SETTABLE_FUSES} from "./INameWrapper.sol";
-import {INameWrapperUpgrade} from "./INameWrapperUpgrade.sol";
-import {IMetadataService} from "./IMetadataService.sol";
-import {ENS} from "../registry/ENS.sol";
-import {IBaseRegistrar} from "../ethregistrar/IBaseRegistrar.sol";
+import {ERC1155Fuse, IERC165} from "../../contracts/wrapper/ERC1155Fuse.sol";
+import {Controllable} from "../../contracts/wrapper/Controllable.sol";
+import {INameWrapper, CANNOT_UNWRAP, CANNOT_BURN_FUSES, CANNOT_TRANSFER, CANNOT_SET_RESOLVER, CANNOT_SET_TTL, CANNOT_CREATE_SUBDOMAIN, PARENT_CANNOT_CONTROL, CAN_DO_EVERYTHING, IS_DOT_ETH, PARENT_CONTROLLED_FUSES, USER_SETTABLE_FUSES} from "../../contracts/wrapper/INameWrapper.sol";
+import {INameWrapperUpgrade} from "../../contracts/wrapper/INameWrapperUpgrade.sol";
+import {IMetadataService} from "../../contracts/wrapper/IMetadataService.sol";
+import {ENS} from "../../contracts/registry/ENS.sol";
+import {IBaseRegistrar} from "../../contracts/ethregistrar/IBaseRegistrar.sol";
 import {IERC721Receiver} from "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol";
 import {Ownable} from "@openzeppelin/contracts/access/Ownable.sol";
-import {BytesUtils} from "./BytesUtils.sol";
-import {ERC20Recoverable} from "../utils/ERC20Recoverable.sol";
+//import {BytesUtils} from "../../contracts/wrapper/BytesUtils.sol";
+import {BytesUtils} from "../harness/BytesUtilsHarness.sol";
+import {ERC20Recoverable} from "../../contracts/utils/ERC20Recoverable.sol";
 
 error Unauthorised(bytes32 node, address addr);
 error IncompatibleParent();
@@ -33,8 +34,8 @@
 {
     using BytesUtils for bytes;
 
-    ENS public immutable override ens;
-    IBaseRegistrar public immutable override registrar;
+    ENS public override ens; // Certora: removed 'immutable'
+    IBaseRegistrar public override registrar; // Certora: removed 'immutable'
     IMetadataService public override metadataService;
     mapping(bytes32 => bytes) public override names;
     string public constant name = "NameWrapper";
@@ -46,7 +47,6 @@
         0x4f5b812789fc606be1b3b16908db13fc7a9adf7ca72641f84d75b47069d3d7f0;
     bytes32 private constant ROOT_NODE =
         0x0000000000000000000000000000000000000000000000000000000000000000;
-
     INameWrapperUpgrade public upgradeContract;
     uint64 private constant MAX_EXPIRY = type(uint64).max;
 
@@ -232,7 +232,7 @@
         address wrappedOwner,
         uint16 ownerControlledFuses,
         address resolver
-    ) public override {
+    ) public virtual override {
         uint256 tokenId = uint256(keccak256(bytes(label)));
         address registrant = registrar.ownerOf(tokenId);
         if (
@@ -299,7 +299,6 @@
      * @param wrappedOwner Owner of the name in this contract
      * @param resolver Resolver contract
      */
-
     function wrap(
         bytes calldata name,
         address wrappedOwner,
@@ -409,7 +408,7 @@
         string calldata label,
         address wrappedOwner,
         address resolver
-    ) public {
+    ) public virtual {
         bytes32 labelhash = keccak256(bytes(label));
         bytes32 node = _makeNode(ETH_NODE, labelhash);
         (uint32 fuses, uint64 expiry) = _prepareUpgrade(node);
@@ -438,7 +437,7 @@
         string calldata label,
         address wrappedOwner,
         address resolver
-    ) public {
+    ) public virtual {
         bytes32 labelhash = keccak256(bytes(label));
         bytes32 node = _makeNode(parentNode, labelhash);
         (uint32 fuses, uint64 expiry) = _prepareUpgrade(node);
@@ -516,9 +515,10 @@
         uint32 fuses,
         uint64 expiry
     )
-        public
-        onlyTokenOwner(parentNode)
-        canCallSetSubnodeOwner(parentNode, keccak256(bytes(label)))
+        public virtual
+        // Certora: remove modifiers (move to harness)
+        //onlyTokenOwner(parentNode)
+        //canCallSetSubnodeOwner(parentNode, keccak256(bytes(label)))
         returns (bytes32 node)
     {
         bytes32 labelhash = keccak256(bytes(label));
@@ -556,9 +556,12 @@
         uint32 fuses,
         uint64 expiry
     )
-        public
-        onlyTokenOwner(parentNode)
-        canCallSetSubnodeOwner(parentNode, keccak256(bytes(label)))
+        public virtual
+        /*
+         Certora: remove modifiers (move to harness)
+         onlyTokenOwner(parentNode)
+         canCallSetSubnodeOwner(parentNode, keccak256(bytes(label)))
+        */
         returns (bytes32 node)
     {
         bytes32 labelhash = keccak256(bytes(label));
@@ -667,7 +670,7 @@
     }
 
     /**
-     * @notice Check whether a name can call setSubnodeOwner/setSubnodeRecord
+     * @notice Check whether a canCallSetSubnodeOwnername can call setSubnodeOwner/setSubnodeRecord
      * @dev Checks both CANNOT_CREATE_SUBDOMAIN and PARENT_CANNOT_CONTROL and whether not they have been burnt
      *      and checks whether the owner of the subdomain is 0x0 for creating or already exists for
      *      replacing a subdomain. If either conditions are true, then it is possible to call
@@ -764,10 +767,11 @@
                 revert OperationProhibited(bytes32(id));
             }
         }
+        return true;    // Certora: Added return statement
     }
 
     function _makeNode(bytes32 node, bytes32 labelhash)
-        private
+        internal
         pure
         returns (bytes32)
     {
--- ../contracts/wrapper/mocks/UpgradedNameWrapperMock.sol	2022-12-19 10:33:11.665301400 +0200
+++ ./munged/UpgradedNameWrapperMock.sol	2022-12-29 10:04:19.140957400 +0200
@@ -1,13 +1,13 @@
 //SPDX-License-Identifier: MIT
 pragma solidity ^0.8.4;
-import "../INameWrapper.sol";
-import "../../registry/ENS.sol";
-import "../../ethregistrar/IBaseRegistrar.sol";
+import "../../contracts/wrapper/INameWrapperUpgrade.sol";
+import "../../contracts/registry/ENS.sol";
+import "../../contracts/ethregistrar/IBaseRegistrar.sol";
 
-contract UpgradedNameWrapperMock {
-    address public immutable oldNameWrapper;
-    ENS public immutable ens;
-    IBaseRegistrar public immutable registrar;
+contract UpgradedNameWrapperMock is INameWrapperUpgrade {
+    address public oldNameWrapper;
+    ENS public ens;
+    IBaseRegistrar public registrar;
 
     constructor(
         address _oldNameWrapper,
